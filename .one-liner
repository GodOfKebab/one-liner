# This file is all you need for one-liner tool to work.
# PARAMETERS START
ONELINER_PATH="$HOME/.one-liner"
export ONELINER_PATH

ONELINER_PYTHON_EXEC="python3"
export ONELINER_PYTHON_EXEC
# PARAMETERS END

alias one-liner='python3 -c "import base64; decoded_string = base64.b64decode(b'"'"''"'"').decode(); exec(decoded_string)"'
